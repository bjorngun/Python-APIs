name: Test, Lint, and Publish Package

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test-lint:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.10', '3.11', '3.12', '3.13']
    steps:
    - uses: actions/checkout@v4.2.2

    - name: Set up Python
      uses: actions/setup-python@v5.6.0
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies for Linux
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libkrb5-dev
        python -m pip install --upgrade pip
        pip install ".[test]"
        python -c "from ldap3 import GSSAPI; print('GSSAPI OK')"

    - name: Install system dependencies for Windows
      if: runner.os == 'Windows'
      run: |
        choco install -y python
        python -m pip install --upgrade pip
        pip install ".[test,lint,publish]"
        python -c "from ldap3 import KERBEROS; print('KERBEROS OK')"

    - name: Display Python version
      run: python -c "import sys; print(sys.version)"

    - name: Run linter (only on Windows + Python 3.13)
      if: matrix.os == 'windows-latest' && matrix.python-version == '3.13'
      run: |
        pylint --rcfile=.pylintrc src/python_apis/

    - name: Run tests
      env:
        PYTHONPATH: src
      run: |
        python -m unittest discover -s src/tests -p "test_*.py" -v

    - name: Build package (only on Windows + Python 3.13)
      if: matrix.os == 'windows-latest' && matrix.python-version == '3.13'
      run: python -m build

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
      uses: codecov/codecov-action@v5.4.3
      with:
        file: ./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}

  publish:
    needs: build-test-lint
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4.2.2

    - uses: actions/setup-python@v5.6.0
      with:
        python-version: '3.13'

    - name: Install system dependencies for GSSAPI
      run: |
        sudo apt-get update
        sudo apt-get install -y libkrb5-dev

    - name: Install publish dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ".[publish]"

    - name: Install Ruby and changelog generator
      run: |
        sudo apt-get update
        sudo apt-get install -y ruby-full
        gem install --user-install github_changelog_generator
        echo "PATH=$(ruby -e 'puts File.join(Gem.user_dir, "bin")'):$PATH" >> $GITHUB_ENV

    - name: Generate changelog
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 || echo "")
        github_changelog_generator \
          --user bjorngun \
          --project Python-APIs \
          --token ${{ secrets.GITHUB_TOKEN }} \
          ${LATEST_TAG:+--since-tag $LATEST_TAG} \
          --output CHANGELOG.md

    - name: Bump patch version
      id: bump
      run: bash .github/scripts/bump-version.sh patch

    - name: Commit version bump and changelog
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add pyproject.toml CHANGELOG.md
        git commit -m "Bump ${{ steps.bump.outputs.bump_type }} version to v${{ steps.bump.outputs.new_version }} [skip ci]"
        git push

    - name: Tag the new version
      run: |
        git tag v${{ steps.bump.outputs.new_version }}
        git push origin v${{ steps.bump.outputs.new_version }}

    - name: Conditionally create GitHub release
      if: steps.bump.outputs.bump_type != 'patch'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.bump.outputs.new_version }}
        name: Release v${{ steps.bump.outputs.new_version }}
        body_path: CHANGELOG.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build package
      run: python -m build

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: python -m twine upload dist/*
